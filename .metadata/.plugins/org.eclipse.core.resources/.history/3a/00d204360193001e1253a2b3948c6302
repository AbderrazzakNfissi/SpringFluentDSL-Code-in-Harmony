/*
 * generated by Xtext 2.32.0
 */
package org.xtext.spring.fluent.validation;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashSet;
import java.util.Set;
import org.eclipse.xtext.validation.Check;
import org.xtext.spring.fluent.springFluentDSL.AppName;
import org.xtext.spring.fluent.springFluentDSL.Dependencies;
import org.xtext.spring.fluent.springFluentDSL.Dependency;
import org.xtext.spring.fluent.springFluentDSL.Entities;
import org.xtext.spring.fluent.springFluentDSL.Entity;
import org.xtext.spring.fluent.springFluentDSL.Feature;
import org.xtext.spring.fluent.springFluentDSL.Prefix;
import org.xtext.spring.fluent.springFluentDSL.Relation;
import org.xtext.spring.fluent.springFluentDSL.Attribute;

/**
 * This class contains custom validation rules.
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class SpringFluentDSLValidator extends AbstractSpringFluentDSLValidator {
	private Set<String> uniqueDependencies = new HashSet<>();
	
	@Check
	public void checkValidateAppName(AppName appName) {
		if (appName.getAppName().isEmpty()) {
			error("App Name cannot be Empty", null);
		}
	}
	
	@Check
    public void checkUniqueDependencies(Dependencies dependencies) {
		uniqueDependencies = new HashSet<>();
        for (Dependency dependency : dependencies.getDependencies()) {
            String dependencyName = dependency.getDependency().toString();
            if (!uniqueDependencies.add(dependencyName)) {
                error("Duplicate dependency '" + dependencyName + "' found. Each dependency should appear only once.",null);
            }
        }
    }

	@Check
	public void checkValidatePrefix(Prefix prefix) {
		String prefixValue = prefix.getPrefix();
	    try {
	        // Attempt to create a URL object from the prefixValue
	        new URL("http://example.com/" + prefixValue);
	    } catch (MalformedURLException e) {
	        // If MalformedURLException is thrown, it means the prefix is not a valid URL
	        error("Invalid format for the 'prefix' attribute. It should be a valid URL endpoint prefix.",null);
	    }
	}
	
	@Check
	public void checkRedundantAttributes(Feature feature) {
	    Set<String> attributeNames = new HashSet<>();
     
	    for (Attribute attribute : feature.getAttributes()) {
	        if (attribute instanceof Attribute) {
	            String attributeName = ((Attribute) attribute).getName();
	            if (!attributeNames.add(attributeName)) {
	                error("Redundant attribute: " + attributeName , null);
	            }
	        }
	    }
	}	

	
	@Check
	public void checkRedundantRelations(Feature feature) {
	    Set<String> relationsNames = new HashSet<>();
     
	    for (Relation relation : feature.getRelations()) {
	        if (relation instanceof Relation) {
	            String relationName = ((Relation) relation).getName();
	            if (!relationsNames.add(relationName)) {
	                error("Redundant attribute: " + relationName , null);
	            }
	        }
	    }
	}
	
	@Check
	public void checkRedundantEntities(Entities entities) {
		 Set<String> entityNames = new HashSet<>();
		 for(Entity entity : entities.getEntities()) {
			 String entityName = entity.getName();
			 if(!entityNames.add(entityName)) {
				 error("Redundant entity: " + entityName , null);
			 }
		 }
	}
	
	@Check
	public void checkNoSelfInheritance(Entity entity) {
	    // Check if the superType references the same entity
	    if (entity.getSuperType() != null && entity.getSuperType().getName() == entity.getName()) {
	        error("A class cannot inherit from itself.", null)
	    }
	}
	
}
